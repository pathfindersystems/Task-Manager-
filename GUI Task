```cpp
#include <QApplication>
#include <QMainWindow>
#include <QVBoxLayout>
#include <QHBoxLayout>
#include <QListWidget>
#include <QPushButton>
#include <QLineEdit>
#include <QMessageBox>
#include <vector>
#include <string>

class Task {
public:
    Task(const std::string& description) : description(description), completed(false) {}
    std::string getDescription() const { return description; }
    bool isCompleted() const { return completed; }
    void markCompleted() { completed = true; }

private:
    std::string description;
    bool completed;
};

class TaskManager : public QMainWindow {
    Q_OBJECT

public:
    TaskManager(QWidget *parent = nullptr) : QMainWindow(parent) {
        setWindowTitle("Task Manager");
        setFixedSize(400, 300);

        QWidget *centralWidget = new QWidget(this);
        setCentralWidget(centralWidget);

        QVBoxLayout *mainLayout = new QVBoxLayout(centralWidget);

        taskList = new QListWidget(this);
        mainLayout->addWidget(taskList);

        QHBoxLayout *inputLayout = new QHBoxLayout();
        taskInput = new QLineEdit(this);
        addButton = new QPushButton("Add Task", this);
        inputLayout->addWidget(taskInput);
        inputLayout->addWidget(addButton);
        mainLayout->addLayout(inputLayout);

        QHBoxLayout *buttonLayout = new QHBoxLayout();
        completeButton = new QPushButton("Mark Completed", this);
        removeButton = new QPushButton("Remove Task", this);
        buttonLayout->addWidget(completeButton);
        buttonLayout->addWidget(removeButton);
        mainLayout->addLayout(buttonLayout);

        connect(addButton, &QPushButton::clicked, this, &TaskManager::addTask);
        connect(completeButton, &QPushButton::clicked, this, &TaskManager::markTaskCompleted);
        connect(removeButton, &QPushButton::clicked, this, &TaskManager::removeTask);

        updateTaskList();
    }

private slots:
    void addTask() {
        QString description = taskInput->text().trimmed();
        if (!description.isEmpty()) {
            tasks.push_back(Task(description.toStdString()));
            taskInput->clear();
            updateTaskList();
        }
    }

    void markTaskCompleted() {
        int currentRow = taskList->currentRow();
        if (currentRow >= 0 && currentRow < static_cast<int>(tasks.size())) {
            tasks[currentRow].markCompleted();
            updateTaskList();
        }
    }

    void removeTask() {
        int currentRow = taskList->currentRow();
        if (currentRow >= 0 && currentRow < static_cast<int>(tasks.size())) {
            tasks.erase(tasks.begin() + currentRow);
            updateTaskList();
        }
    }

    void updateTaskList() {
        taskList->clear();
        for (const auto& task : tasks) {
            QString itemText = QString::fromStdString(task.getDescription());
            if (task.isCompleted()) {
                itemText = "[X] " + itemText;
            } else {
                itemText = "[ ] " + itemText;
            }
            taskList->addItem(itemText);
        }
    }

private:
    QListWidget *taskList;
    QLineEdit *taskInput;
    QPushButton *addButton;
    QPushButton *completeButton;
    QPushButton *removeButton;
    std::vector<Task> tasks;
};

int main(int argc, char *argv[]) {
    QApplication app(argc, argv);
    TaskManager taskManager;
    taskManager.show();
    return app.exec();
}

#include "main.moc"
